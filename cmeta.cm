	J &ex1_
	B &halt
	
:ex1_
	; parse ex2
	
	J &ex2_
		; if successful, jump to loop to try to parse alternatives
	I &ex1s
		; if failed, jump to end
	B &ex1e

:ex1d	; prolog to ending
	L 'E'
	O
:ex1e
	F
	G 1
	O
	R
	
:ex1s	; ex1 sequence
	T '/'
	I &ex1a		; got alternative
	S
	B &ex1d		; otherwise jump to prolog of end of ex1

:ex1a	; ex1a - ex1s got alternative
	L 'I'
	G 1
	O
	J &ex2_
	E	; if we couldn't parse a ex2, fail here (we can't have a trailing '/')
	B &ex1s
	
	
	

:ex2_
	; parse ex3
	; if we got ex3, continue
	; otherwise jump to end of ex2
		
	J &ex2f
	I &ex2s
	B &ex2e

:ex2f
	; first part of ex2
	J &ex3_	     ; try parsing an ex3
	I &ex2g	     ; if successful jump to return
	J &outp	     ; if not successful, try to parse an output
	I &ex2s
	B &ex2r
:ex2g
	L 'I'		; if true, skip jump
	G 2
	O
	L 'B'		; if false jump to the end of generated ex2 code
	G 1
	O
	G 2
	F
	O
	B &ex2s
:ex2e
	G 1
	F
	O
:ex2r
	R	

:ex2s	; second part of ex2
	; repeatedly parse ex3's or outputs
	J &ex3_	     ; try to parse an ex3
	I &ex2t	     ; if successful, jump to branch to emit a E opcode
	J &outp	     ; if not, check for an output
	I &ex2s	     ; if successful, jump back to top of ex2s loop
	S
	B &ex2e

:ex2t	; continue second part of ex2, if parsed an ex3
	L 'E'
	O
	B &ex2s

	
:ex3_

	; check for literal IDs
	L 'J'
	L '&'
	J &id__ ; check for id
	I &e3cl ; if found one, go to e3cl (ex3 call)
	D	; otherwise clear 'J&' from output buffer
	
	; check for literal strings
	; and generate code to match them
	J &e3st ; check for string
	I &ex3e ; if found one, jump to ex3e (ex3 exit)

	; check for '.ID', '.NUMBER', '.STRING', '.EMPTY'
	; and generate call to pregenerated routine to test for those things
	J &e3dt
	I &ex3e
	
	J &e3ns	; check for nested expressions
	I &ex3e

	J &e3rp	; check for '$' repeating expressions
	I &ex3e


	
:ex3e
	R


:e3rp
	T '$'
	I &e3rc
	R
	
:e3rc	; ex3 repeat continue
	F
	G 1
	O
	J &ex3_
	L 'I'
	G 1
	O
	L 'S'
	O
	R
	

:e3ns
	T '('
	I &e3nc
	R

:e3nc	; ex3 nested continue
	J &ex3_
	I &e3nd
	E
	
:e3nd	; ex3 nested continue 2 (d->e)
	T ')'
	E
	R


:e3dt	; check for '.ID', '.NUMBER', '.STRING', '.EMPTY'
	T '.'
	I &e3dc
	R
	
:e3dc	; e3 dot continue
	T 'I'
	I &e3di
	T 'N'
	I &e3dn
	T 'S'
	I &e3ds
	T 'E'
	I &e3de
	E
	
:e3di 	; e3 dot ID
	T 'D'
	E
	L 'J'
	L '&'
	L '_'
	L 'i'
	L 'd'
	L '_'
	O
	R
	
:e3dn	; e3 dot NUMBER
	T 'U'
	E
	T 'M'
	E
	T 'B'
	E
	T 'E'
	E
	T 'R'
	E

	L 'J'
	L '&'
	L '_'
	L 'n'
	L 'u'
	L 'm'
	O
	R
	
	
:e3ds
	T 'T'
	E
	T 'R'
	E
	T 'I'
	E
	T 'N'
	E
	T 'G'
	E

	L 'J'
	L '&'
	L '_'
	L 's'
	L 't'
	L 'r'
	O
	R

:e3de
	T 'M'
	E
	T 'P'
	E
	T 'T'
	E
	T 'Y'
	L 'S'
	O
	R


:e3st
	T '''
	I &e3sc
	R
:e3sc		; (ex3 string continue)
	T '''
	I &e3se
	L 'T'
	L '0'
	L 'x'
	U '''
	H
	O
	L 'I'
	G 2	; jump to continue
	O
	L 'B'   ; jump to failure
	G 1
	O

	F
	G 2
	O

:e3sl	; (ex3 string loop)
	T '''
	I &e3se
	L 'T'
	L '0'
	L 'x'
	U '''
	H
	O
	L 'E'
	O
	B &e3sl	


:e3se	; (ex3 string exit)
	L 'S'
	O
	F
	G 1	; generate failure label
	O
	R


:e3cl		; ex3 call
	O
	R


:id__
	A
	I &idct
	R

:idct	  ; id continue
	C
:idlp
	A
	I &idct
	N
	I &idct
	S	; if not alpha or numeric, we found the end of the id, so set the flag
	R	
	


:otck	; outcheck

	T '.'
	I &outp
	R
	
:outp	; handle output statements
	; e.g. .OUT('abc')
	;      .OUT('abc' *)
	;      .OUT('abc' *1)
	;      .OUT(*)
	;      .OUT(*1)

	T 'O'
	I &outc

	; TODO handle .LABEL
	T 'L'
	I &outl
	R

:outl	; output label expression
	T 'A'
	E
	T 'B'
	E
	T 'E'
	E
	T 'L'
	E
	L 'F'
	O
	R

:outc
	T 'U'
	E
	T 'T'
	E
	T '('

	; kleene output expressions
:otsq	; 'output seq'
	J &otex
	I &otsq

	T ')'
	E
	L 'O'
	O
	R

:otex	; output expression
	T '*'
	I &otcp
	
	T '''
	I &otst
	R

:otst	; output string
  	T '''	 ; empty string, or end of string
	I &otse
	U '''
	L 'L'
	L '0'
	L 'x'
	H
	O
	B &otst
:otse 	; output string exit
	R

:otcp
	; we already got a '*'
	; check for a 1 or 2 right after it

	T '1'
	I &otl1
	T '2'
	I &otl2

	; otherwise, generate code to copy token buffer to output buffer
	L 'C'
	O
	R	; return to right after J &otex in otsq

:otl1
	; generate code to generate label 1
	L 'G'
	L '1'
	O
	R	; return to right after J &otex in otsq

:otl2
	; generate code to generate label 2
	L 'G'
	L '2'
	O
	R	; return to right after J &otex in otsq
	

:halt
	